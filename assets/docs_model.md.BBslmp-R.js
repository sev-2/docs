import{_ as s,c as a,o as i,V as e}from"./chunks/framework.DvHbsNxb.js";const g=JSON.parse('{"title":"Model","description":"","frontmatter":{"title":"Model"},"headers":[],"relativePath":"docs/model.md","filePath":"docs/model.md"}'),t={name:"docs/model.md"},n=e(`<h1 id="model" tabindex="-1">Model <a class="header-anchor" href="#model" aria-label="Permalink to &quot;Model&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>Model refers to the structure and schema of your database tables, as well as the data managed within those tables. Raiden provides a way help you define, manage, and interact with your models effectively, empowering you to build powerful and scalable applications on top of PostgreSQL.</p><h2 id="model-definition" tabindex="-1">Model definition <a class="header-anchor" href="#model-definition" aria-label="Permalink to &quot;Model definition&quot;">​</a></h2><p>You have two options to define a model:</p><ol><li><p>Using Supabase Studio. You can create a new table on Studio, then run <code>raiden generate</code>. It will generate new model with the name same as the table name.</p></li><li><p>Create your own definition. After create your own model, you can run <code>raiden generate</code> to auto-sync with the database table. The new table, new column, of modified column will be created or updated according to your model.</p></li></ol><p>Here is the model structure:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-06vq5" id="tab-OGZAJyy" checked="checked"><label for="tab-OGZAJyy">internal/models/books.go</label></div><div class="blocks"><div class="language-go vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> models</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">time</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Books</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int64</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;id,omitempty&quot; column:&quot;id&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;title,omitempty&quot; column:&quot;title&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;body,omitempty&quot; column:&quot;body&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CreatedAt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Time</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`json:&quot;created_at,omitempty&quot; column:&quot;created_at&quot;\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Metadata </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`schema:&quot;public&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Acl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`read:&quot;&quot; write:&quot;public&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><p>You can create a column of a table by define it with <code>column:&quot;name&quot;</code>. The type of column based on Go struct&#39;s field type.</p><p>The <code>json:&quot;body,omitempty</code> will be the JSON key of response. To understand about JSON encoding on Go, read <a href="https://pkg.go.dev/encoding/json" target="_blank" rel="noreferrer">https://pkg.go.dev/encoding/json</a>.</p><h3 id="metadata" tabindex="-1">Metadata <a class="header-anchor" href="#metadata" aria-label="Permalink to &quot;Metadata&quot;">​</a></h3><p>You can set which is the schema of a table will be created by update schema on Metadata field. Usually the value of schema is <code>public</code>.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Books</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Metadata </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`schema:&quot;public&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="acl" tabindex="-1">ACL <a class="header-anchor" href="#acl" aria-label="Permalink to &quot;ACL&quot;">​</a></h3><p>Please refers to <a href="/docs/acl">ACL documentation</a>.</p>`,15),l=[n];function o(h,p,d,r,k,c){return i(),a("div",null,l)}const y=s(t,[["render",o]]);export{g as __pageData,y as default};
